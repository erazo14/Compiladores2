package compiladores;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.*;
import java.io.*;
//import java.swing.JOptionPane;



/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return super.scanner.next_token(); :};
scan with {: return super.getScanner().next_token(); :};

parser code{:
    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   @Override
      	public void syntax_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error con:"+ cur_token.value + " en la linea: " + (cur_token.left+1) +", columna: " + (cur_token.right+1),null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  //erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   //System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));
}

:}

action code {:

        Hashtable<String, Simbolos> tabla= new Hashtable<String, Simbolos>(); // tabla de simbolo
        Hashtable<String, String> Record = new Hashtable<String, String>();
        ArrayList<Type> types = new ArrayList<Type>();
        Type nuevo = new Type();
        Procedimiento proc = new Procedimiento();
        String ProcedimietnoActual="";
        int ambitoactual = 0;

//---------------------metodo tipos-------------------------
public String getTipo(String nombre, int amb,int linea,int columna){
String id,id2,n="";
id2 = nombre.toString() + "," + "0";
id= nombre.toString() + "," + String.valueOf(amb);

try{
    Simbolos sim = new Simbolos();
     if ((Simbolos)tabla.get(id) != null) {
         sim= (Simbolos)tabla.get(id);
         n= sim.getTipos().toString();
     }
     else
     {
            if ((Simbolos)tabla.get(id2) != null){
                sim= (Simbolos)tabla.get(id2);
                n= sim.getTipos().toString();
            }
            else{
                n="integer" ;  /// retorna un integer
                System.out.println( "ERROR Variable no declarada ------------------ " + nombre);
                E2(linea,columna, "Variable no declarada: " + nombre  );
            }

      }

    //System.out.println( "entro -- " + n);

}catch(Exception e){
    n="integer" ;
    //System.out.println( "noooooooooooooooooooooo-- " + n);
    System.out.println( "ERROR HASH " );

}
    return n;
}
// -------------- metodo insertar simbolo --------------------


    public void insertarSimbolo(String id, Simbolos simbolo,int linea,int columna, int ambito){
            String id1,id2;

            id1= id.toString() + "," + String.valueOf(ambito);
            id2 = id.toString() + "," + "0";

            if((tabla.get(id1)== null)  ){

               if (( tabla.get(id2)== null)  ){
                    tabla.put(id1, simbolo);
                }
                else
                {
                    E2(linea,columna, "Variable o Metodo ya declarada: " + "' "+ id.toUpperCase() + "' "  );
                }
            }
            else{
                    E2(linea,columna, "Variable o Metodo ya declarada: " + "' "+ id.toUpperCase() + "' "  );
                // System.out.println( "Variable ya declarada");


            }

System.out.println("-------------------------------------");
System.out.println("---------Tabla De Simbolo------------");
                Enumeration e = tabla.keys();
                Simbolos s=new Simbolos();
                String obj;
                int i = 1;
                   while (e.hasMoreElements()) {
                      obj = e.nextElement().toString();
                      s=tabla.get(obj);

                      System.out.println(i + "   key "+ obj +": "+ s.getTipos() +s.getTipoDeDeclaracion());
                      i+=1;
                           }
System.out.println("-------------------------------------");
        }

        public Boolean ExisteType(String a, String b){
            if (a.equals(b)){
                return true;
            }
            return false;
        }
        public void E2(int linea,int columna, String mensaje){
            System.err.println("Error Semantico [Linea: " + linea + " Columna: " + columna + "] -> " + mensaje ) ;
            //Main.errorGlobal  = true;
        }

	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + "\n cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_errors(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}

:};


/*-* terminal symbols */
//estos son los que no estoy utilizando
terminal Potencia, DosPuntos;

//estos son los terminales que estoy utilizando
terminal Suma, Resta, Mult, Div,Return,Structs,EndFor,ExitFor,Private, EndWhile, EndSelect, EndCase;
terminal As, Dim, Main, ByVal,ByRef,Float,Double,Select,Concatenacion, DiviEntera, GuionBajo, Eqv, Imp, Step,Exit,Case;
terminal Char, Integer, String, Boolean, Entero, Type, Ch, str, com,SelectCase;
terminal If, Do, While, For, Then, To, Else, ElseIf, End, EndIf, EndSub, EndFunction, EndType, Loop, Next;
terminal Sub, Print, Punto, LlaveDer, LlaveIzq;
terminal ParIzq, ParDer, Input;
terminal Menor, Mayor, Distinto, MenorIgual, MayorIgual, Not, And, Or, Xor;
terminal EndLine, Id, Coma, Call;
terminal Asigna, TipoBoolean, Function;

/*-* Non-non terminal symbols **/
non terminal  ini, decvarstm, decvar, listdec, tipo, decfunction, functionbody, listparam, parametros, mainstm;
non terminal functionlist, operadorcomp, escribir, leer, impre, ret, conca;
non terminal tipos, statementlist, statement, ifstm, elsestm, elselist, elseifstm, condicion, operando, iflist;
non terminal forstm, dostm, exp, expMat, endtypes, tipotype, final, dec, argumentos, listarg, decvarparam;
non terminal types, sfunction, ffunction, callfunction, expLog,decvarlist,dectype, sfunctioncall,func;



/* precedence */
//precedence left Igual;
precedence left Suma, Resta;
precedence left Mult, Div;
precedence left Potencia;

start with ini;

ini ::= EndLine ini |EndLine
       |dec functionlist mainstm
       |dec functionlist error
       |dec mainstm functionlist
       |dec functionlist mainstm functionlist
       |dec mainstm;
 
/*-*
 * GRAMMAR RULES
 */

conca        ::= str Concatenacion conca|str;
functionbody ::= statementlist;

functionlist ::= functionlist decfunction|decfunction;

types        ::= Type Id:id final decvarlist:dtp EndType final{:if(Record.get(id.toString()) == null){
                                                                Record.put(id.toString(),dtp.toString());
                                                                nuevo.id = id.toString();
                                                                types.add(nuevo);int j=0;
                                                                for(String k : Record.keySet()){
                                                                        String elemento = Record.get(k);
                                                                        System.out.println("ID:" + k + " valor: " + elemento );
                                                                        for (int i = 0; i < types.get(j).listaDeInstancias.size(); i++) {
                                                                            System.out.println(types.get(j).listaDeInstancias.get(i));
                                                                            System.out.println(types.get(j).tipoDeInstancias.get(i));
                                                                        }
                                                                        j++;
                                                                    }
                                                                    nuevo = new Type();
                                                                }else{
                                                                    E2(dtpleft + 1,dtpright + 1, "Variable o Metodo ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );
                                                                }

                                                                :};

decvarlist          ::= dectype:dtp final decvarlist:dl{:if(dl.toString()==""){RESULT=dtp.toString();}else{
                                                         RESULT=dtp.toString()+"X"+dl.toString();}:}
                       |   {:RESULT="";:};

dectype             ::= Id:id As tipo:tp {: boolean esta = false;
                                            for (int i = 0; i < nuevo.listaDeInstancias.size(); i++) {
                                                if (nuevo.listaDeInstancias.get(i).equals(id.toString())){
                                                    esta = true;
                                                }
                                            }
                                            if (esta == false) {
                                                nuevo.listaDeInstancias.add(id);
                                                nuevo.tipoDeInstancias.add(tp);
                                                RESULT=id.toString() + "x" +tp.toString();
                                            }else{E2(idleft + 1,idright + 1, "Variable de la instancia ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );}
                                             :}
                    |Id:id As Id:id1{: boolean esta = false,existe=false;
                                       for(int i = 0;i<types.size();i++){
                                            if(ExisteType(types.get(i).id.toString(),id1.toString())){existe = true;}
                                       }
                                       System.out.println(existe);
                                       if(existe){
                                       for (int i = 0; i < nuevo.listaDeInstancias.size(); i++) {
                                           if (nuevo.listaDeInstancias.get(i).equals(id.toString())){
                                               esta = true;
                                           }
                                       }
                                       if (esta == false) {
                                           nuevo.listaDeInstancias.add(id);
                                           nuevo.tipoDeInstancias.add(id1);
                                       }else{E2(idleft + 1,idright + 1, "Variable del type ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );}

                                        RESULT= id+"xRecord("+Record.get(id1)+")" ;}else{E2(id1left + 1,id1right + 1, "Type no ha sido declarado: " + "' "+ id1.toString().toUpperCase() + "' "  );}:};

decfunction  ::= error decfunction
                |Sub sfunction functionbody EndSub final
                |Sub sfunction EndSub final
                |ffunction
                |types
                ;

escribir    ::= Print impre final;

impre       ::= Id|Id ParIzq listparam ParDer|conca|Ch|Id Punto Id;

leer        ::= Input ParIzq Id ParDer final;

sfunction ::= Id ParIzq listparam ParDer final;

sfunctioncall ::= Id ParIzq listarg ParDer final;

func ::=Function Id:id{:ProcedimietnoActual = "id.toString()";:} ParIzq listparam:param ParDer {:if(ProcedimietnoActual == ""){
                                                                                                     Simbolos s = new Simbolos(id.toString(), "function", 0);
                                                                                                     s.setTipoDeDeclaracion("Declaracion de Funcion");
                                                                                                    insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                                                                                }else{
                                                                                                    Simbolos s = new Simbolos(id.toString(), "function", ambitoactual);
                                                                                                    s.setTipoDeDeclaracion("Declaracion de Funcion");
                                                                                                    insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                                                                                }:};

ffunction ::= func As tipo final functionbody ret EndFunction final
             |func final functionbody EndFunction final
             |func final EndFunction final
             |func As tipo final ret EndFunction final;
//           |Function Id ParIzq listparam ParDer final functionbody ret error;

ret     ::= Return TipoBoolean final |Return conca final |Return Ch final|Return exp|;

callfunction ::= Call sfunction|sfunction;

decvarstm             ::= Dim listdec final
                       |Dim listdec Asigna Entero final;

listdec            ::= decvar
                       |decvar Coma listdec
                       |Id:id Coma listdec {: if(ProcedimietnoActual == ""){
                                             Simbolos s = new Simbolos(id.toString(), "variant", 0);
                                             s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            }
                                            else{Simbolos s = new Simbolos(id.toString(), "variant", ambitoactual);
                                            s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                            } :}
                       |Id:id {:  Simbolos s = new Simbolos(id.toString(), "variant", 0);
                                s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                :};

statementlist           ::= statement
                           |statement statementlist
                            ;

dec             ::= decvarstm dec | ;

statement            ::=error statement
                        |decvarstm
                        |iflist
                        |forstm
                        |dostm
                        |tipotype
                        |escribir
                        |leer
                        |expMat
                        |callfunction;

tipotype    ::= Id Punto Id final;

decvar             ::= Id:id As tipo:tp {:  if (ProcedimietnoActual == ""){
                                            Simbolos s = new Simbolos(id.toString(), tp.toString(), 0);
                                            s.setTipoDeDeclaracion("Declaracion de variable Primitiva");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            }else{
                                            Simbolos s = new Simbolos(id.toString(), tp.toString(), 0);
                                            s.setTipoDeDeclaracion("Declaracion de variable Primitiva");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            } :}
                      |Id:id As Id:id1{:
                            boolean declarado = false;
                            if (ProcedimietnoActual == ""){
                                for(int i = 0;i< types.size();i++){
                                    System.out.println();
                                    if (ExisteType(types.get(i).id.toString(), id1.toString())){
                                        Simbolos s = new Simbolos(id.toString(), id1.toString(), 0);
                                        s.setTipoDeDeclaracion("Declaracion de variable Estructural");
                                        s.setType(types.get(i));
                                        insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                        declarado = true;
                                    }
                                }
                            }else{
                                for(int i = 0;i< types.size();i++){
                                    if (types.get(i).id.toString() == id1.toString()){
                                        Simbolos s = new Simbolos(id.toString(), id1.toString(), ambitoactual);
                                        s.setTipoDeDeclaracion("Declaracion de variable Estructural");
                                        s.setType(types.get(i));
                                        insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                        declarado = true;
                                    }
                                }
                           } if (declarado == false)
                                    E2(id1left + 1,id1right + 1, "Type no declarado: " + "' "+ id1.toString().toUpperCase() + "' "  );:}
                      |error{:add_errors((java_cup.runtime.Symbol)CUP$Analizador$stack.peek(), "Id As Tipo");:};
                  
iflist              ::=ifstm statementlist elselist EndIf final
                        |ifstm elselist EndIf final;

ifstm              ::= If expLog Then final;

elselist           ::=  elsestm
                       |elseifstm 
                       | ;

elsestm            ::= Else final statementlist |Else final ;
                      
elseifstm          ::=  ElseIf expLog Then final statementlist elselist|ElseIf expLog Then final elselist ;

forstm  ::= For Id Asigna  expMat To expMat statementlist Next Id final
           |For Id Asigna  expMat To expMat Next Id final;

dostm            ::= Do While expLog final statementlist Loop final
                    |Do expLog final statementlist Loop While final
                    |Do While expLog final Loop final
                    |Do expLog final Loop While final;

final   ::= EndLine|;

mainstm             ::= Sub Main ParIzq error ParDer final  functionbody EndSub final
                        |Sub Main ParIzq ParDer final  functionbody EndSub final|Sub Main ParIzq ParDer final EndSub final;

tipo               ::= Char:c    {:RESULT=c.toString(); :}
                       |Integer:i{:RESULT=i.toString(); :}
                       |String:s {:RESULT=s.toString(); :}
                       |Boolean:b{:RESULT=b.toString(); :};


listparam           ::=  listparam Coma parametros
                        |parametros
                        | ;

listarg    ::= listarg Coma argumentos
               |argumentos
               | ;
argumentos ::= tipos
               |Id
               |operando
               |Id ParIzq listarg ParDer;

parametros          ::= ByVal decvarparam
                        |ByRef decvarparam
                        |decvarparam
                        |operando
                        |Id ParIzq listparam ParDer;

decvarparam  ::= Id:id As tipo:tp{::}
                 |Id As Id
                 |error{:add_errors((java_cup.runtime.Symbol)CUP$Analizador$stack.peek(), "Id As Tipo");:};

tipos             ::=  Entero
                       |TipoBoolean
                       |Ch
                       |conca;


condicion       ::= operando operadorcomp operando;


operando        ::= Id
                   |tipos;

operadorcomp          ::= Mayor
                         |Menor
                         |MayorIgual
                         |MenorIgual
                         |Distinto
                         |Asigna;

expLog     ::= condicion
            |Not ParIzq expLog ParDer
            |Not ParIzq expLog ParDer Or expLog
            |Not ParIzq expLog ParDer Xor expLog
            |Not ParIzq expLog ParDer And expLog
            |condicion Or expLog
            |condicion Xor expLog
            |condicion And expLog
            |ParIzq expLog ParDer
            |ParIzq expLog ParDer Or expLog
            |ParIzq expLog ParDer Xor expLog
            |ParIzq expLog ParDer And expLog
            ;

expMat  ::= Id:id Asigna exp:e {:
            if(ExisteType(getTipo(id.toString(),ambitoactual,idleft+1,idright+1),"variant")){
                Simbolos sim  = new Simbolos();
                String f = id.toString() +","+ ambitoactual;
                sim = (Simbolos)tabla.get(f);
                System.out.println("                "+ f);
                sim.setTipos(e.toString());
                System.out.println("           "+sim.getTipos()); }
            if(ExisteType(getTipo(id.toString(),ambitoactual,idleft+1,idright+1),e.toString())){
                /*generar codigo*/
            }else{
                E2(idleft+1,idright+1,"No se Puede Asiganr dos tipos diferntes");
            }:} final
            |Id Asigna TipoBoolean final
            |Id Asigna conca final
            |Id Punto Id Asigna exp final
            |Id Punto Id Asigna TipoBoolean final
            |Id Punto Id Asigna conca final;

exp     ::= Entero {:RESULT = "integer";:}
            |Id:id {: RESULT = getTipo(id.toString(),ambitoactual,idleft+1,idright+1);:}
            |Id:id Punto Id:id1 {:Boolean encontro=false;String tipo="",type="";for(int i = 0 ; i<types.size();i++){
                                
                               if(ExisteType(types.get(i).id.toString(),getTipo(id.toString(),ambitoactual,idleft+1,idright+1))){
                                type = "Instancia del Type "+types.get(i).id.toString().toUpperCase();
                                for(int j =0;j<types.get(i).listaDeInstancias.size();j++){
                                    System.out.println(types.get(i).listaDeInstancias.get(j).toString()+"      "+id1.toString());
                                    if(ExisteType(types.get(i).listaDeInstancias.get(j).toString(),id1.toString())){
                                        tipo = types.get(i).tipoDeInstancias.get(j).toString();
                                        encontro = true;
                                   }
                                }
                                }else{E2(idleft+1,idright+1,"Type no Declarado: '"+id.toString().toUpperCase()+"'");}}
                                if(encontro){RESULT = tipo;System.out.println(tipo);}else{E2(id1left+1,id1right+1,type + " no declarada: "+id1.toString().toUpperCase());}
:}
            |Id ParIzq listparam ParDer {:RESULT="";:}
            |exp:e1 Suma exp:e2         {:if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}:}
            |exp:e1 Resta exp:e2        {:if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}:}
            |exp:e1 Mult exp:e2         {:if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}:}
            |exp:e1 Div exp:e2          {:if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}:}
            |exp:e1 Potencia exp:e2     {:if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}:}
            |ParIzq exp:e ParDer        {:RESULT = e.toString();:}
            ;
