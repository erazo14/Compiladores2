
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 15 08:05:26 CST 2014
//----------------------------------------------------

package compiladores;

import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 15 08:05:26 CST 2014
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\006\000\002\002\004\000\002\022\005\000" +
    "\002\022\003\000\002\010\003\000\002\014\004\000\002" +
    "\014\003\000\002\050\010\000\002\055\005\000\002\055" +
    "\002\000\002\056\005\000\002\056\005\000\002\007\004" +
    "\000\002\007\007\000\002\007\006\000\002\007\003\000" +
    "\002\007\003\000\002\016\005\000\002\020\003\000\002" +
    "\020\006\000\002\020\003\000\002\020\003\000\002\020" +
    "\005\000\002\017\007\000\002\051\007\000\002\057\007" +
    "\000\002\061\002\000\002\060\010\000\002\052\012\000" +
    "\002\052\007\000\002\052\006\000\002\052\011\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\002\000\002\053\004\000\002\053\003" +
    "\000\002\003\005\000\002\003\007\000\002\005\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\024\003\000\002\024\004\000\002\044\004\000\002\044" +
    "\002\000\002\025\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\042\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\034\007\000\002\034\006" +
    "\000\002\026\006\000\002\030\003\000\002\030\003\000" +
    "\002\030\002\000\002\027\005\000\002\027\004\000\002" +
    "\031\010\000\002\031\007\000\002\035\014\000\002\035" +
    "\013\000\002\036\011\000\002\036\011\000\002\036\010" +
    "\000\002\036\010\000\002\043\003\000\002\043\002\000" +
    "\002\013\013\000\002\013\012\000\002\013\011\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\011\005\000\002\011\003\000\002\011\002" +
    "\000\002\046\005\000\002\046\003\000\002\046\002\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\006\000\002\012\004\000\002\012\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\006\000\002\047\005" +
    "\000\002\047\005\000\002\047\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\054\003\000" +
    "\002\054\006\000\002\054\010\000\002\054\010\000\002" +
    "\054\010\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\007\000\002\054\007" +
    "\000\002\054\007\000\002\062\002\000\002\040\007\000" +
    "\002\040\006\000\002\040\006\000\002\040\010\000\002" +
    "\040\010\000\002\040\010\000\002\037\003\000\002\037" +
    "\003\000\002\037\005\000\002\037\006\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\016\003\uffcb\023\006\047\uffcb\073\uffcb\114" +
    "\007\122\uffcb\001\002\000\004\002\u0133\001\002\000\014" +
    "\003\uffcb\023\006\047\uffcb\073\uffcb\122\uffcb\001\002\000" +
    "\006\003\u0124\115\u0123\001\002\000\020\002\uffff\003\uffcb" +
    "\023\006\047\uffcb\073\uffcb\114\007\122\uffcb\001\002\000" +
    "\012\003\020\047\011\073\012\122\013\001\002\000\004" +
    "\115\u0116\001\002\000\006\024\u0107\115\026\001\002\000" +
    "\004\115\u0102\001\002\000\032\003\uffab\022\352\023\uffab" +
    "\054\uffab\055\uffab\057\uffab\067\uffab\074\uffab\102\uffab\114" +
    "\114\115\uffab\117\uffab\001\002\000\014\002\uffec\003\uffec" +
    "\047\uffec\073\uffec\122\uffec\001\002\000\014\002\uffeb\003" +
    "\uffeb\047\uffeb\073\uffeb\122\uffeb\001\002\000\014\002\ufff5" +
    "\003\ufff5\047\ufff5\073\ufff5\122\ufff5\001\002\000\012\003" +
    "\020\047\011\073\023\122\013\001\002\000\012\003\346" +
    "\047\011\073\012\122\013\001\002\000\014\002\ufffa\003" +
    "\020\047\011\073\023\122\013\001\002\000\004\115\026" +
    "\001\002\000\014\002\ufffc\003\020\047\011\073\023\122" +
    "\013\001\002\000\014\002\ufff6\003\ufff6\047\ufff6\073\ufff6" +
    "\122\ufff6\001\002\000\004\100\204\001\002\000\026\003" +
    "\051\023\006\054\047\055\055\057\031\066\037\074\042" +
    "\102\053\115\052\117\032\001\002\000\044\003\uffc6\012" +
    "\uffc6\023\uffc6\054\uffc6\055\uffc6\057\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\071\uffc6\072\uffc6\074\uffc6\102" +
    "\uffc6\115\uffc6\117\uffc6\001\002\000\004\115\327\001\002" +
    "\000\004\115\026\001\002\000\044\003\051\012\uffce\023" +
    "\006\054\047\055\055\057\031\062\uffce\063\uffce\065\uffce" +
    "\066\uffce\067\uffce\071\uffce\072\uffce\074\042\102\053\115" +
    "\052\117\032\001\002\000\044\003\uffc1\012\uffc1\023\uffc1" +
    "\054\uffc1\055\uffc1\057\uffc1\062\uffc1\063\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\071\uffc1\072\uffc1\074\uffc1\102\uffc1\115\uffc1" +
    "\117\uffc1\001\002\000\004\066\323\001\002\000\044\003" +
    "\uffc2\012\uffc2\023\uffc2\054\uffc2\055\uffc2\057\uffc2\062\uffc2" +
    "\063\uffc2\065\uffc2\066\uffc2\067\uffc2\071\uffc2\072\uffc2\074" +
    "\uffc2\102\uffc2\115\uffc2\117\uffc2\001\002\000\016\002\uffab" +
    "\003\uffab\047\uffab\073\uffab\114\114\122\uffab\001\002\000" +
    "\044\003\uffc9\012\uffc9\023\uffc9\054\uffc9\055\uffc9\057\uffc9" +
    "\062\uffc9\063\uffc9\065\uffc9\066\uffc9\067\uffc9\071\uffc9\072" +
    "\uffc9\074\uffc9\102\uffc9\115\uffc9\117\uffc9\001\002\000\010" +
    "\012\ufff7\066\ufff7\067\ufff7\001\002\000\010\050\312\051" +
    "\067\115\310\001\002\000\044\003\uffc5\012\uffc5\023\uffc5" +
    "\054\uffc5\055\uffc5\057\uffc5\062\uffc5\063\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\071\uffc5\072\uffc5\074\uffc5\102\uffc5\115\uffc5" +
    "\117\uffc5\001\002\000\044\003\uffd5\012\uffd5\023\uffd5\054" +
    "\uffd5\055\uffd5\057\uffd5\062\uffd5\063\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\071\uffd5\072\uffd5\074\uffd5\102\uffd5\115\uffd5\117" +
    "\uffd5\001\002\000\044\003\uffc8\012\uffc8\023\uffc8\054\uffc8" +
    "\055\uffc8\057\uffc8\062\uffc8\063\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\071\uffc8\072\uffc8\074\uffc8\102\uffc8\115\uffc8\117\uffc8" +
    "\001\002\000\044\003\uffc4\012\uffc4\023\uffc4\054\uffc4\055" +
    "\uffc4\057\uffc4\062\uffc4\063\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\071\uffc4\072\uffc4\074\uffc4\102\uffc4\115\uffc4\117\uffc4\001" +
    "\002\000\020\046\065\050\061\051\067\100\073\110\064" +
    "\115\063\121\057\001\002\000\044\003\uffc7\012\uffc7\023" +
    "\uffc7\054\uffc7\055\uffc7\057\uffc7\062\uffc7\063\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\071\uffc7\072\uffc7\074\uffc7\102\uffc7\115" +
    "\uffc7\117\uffc7\001\002\000\024\003\051\023\006\054\047" +
    "\055\055\057\031\074\042\102\053\115\052\117\032\001" +
    "\002\000\010\075\205\100\204\120\206\001\002\000\004" +
    "\100\200\001\002\000\032\003\051\023\006\054\047\055" +
    "\055\057\031\062\155\063\156\065\uffb7\074\042\102\053" +
    "\115\052\117\032\001\002\000\022\046\065\050\061\051" +
    "\067\056\060\100\073\110\064\115\063\121\057\001\002" +
    "\000\044\003\uffc3\012\uffc3\023\uffc3\054\uffc3\055\uffc3\057" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3" +
    "\072\uffc3\074\uffc3\102\uffc3\115\uffc3\117\uffc3\001\002\000" +
    "\060\003\uff90\023\uff90\054\uff90\055\uff90\057\uff90\060\uff90" +
    "\071\uff90\074\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105" +
    "\uff90\106\uff90\107\uff90\111\uff90\112\uff90\113\uff90\114\uff90" +
    "\115\uff90\116\uff90\117\uff90\120\uff90\001\002\000\020\046" +
    "\065\050\061\051\067\100\073\110\064\115\063\121\057" +
    "\001\002\000\060\003\uff8f\023\uff8f\054\uff8f\055\uff8f\057" +
    "\uff8f\060\uff8f\071\uff8f\074\uff8f\101\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\105\uff8f\106\uff8f\107\uff8f\111\uff8f\112\uff8f\113" +
    "\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\001\002" +
    "\000\060\003\uff8b\023\uff8b\054\uff8b\055\uff8b\057\uff8b\060" +
    "\uff8b\071\uff8b\074\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b" +
    "\105\uff8b\106\uff8b\107\uff8b\111\uff8b\112\uff8b\113\uff8b\114" +
    "\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\001\002\000\056" +
    "\003\uff8c\023\uff8c\054\uff8c\055\uff8c\057\uff8c\060\uff8c\071" +
    "\uff8c\074\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c" +
    "\106\uff8c\107\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115" +
    "\uff8c\117\uff8c\120\uff8c\001\002\000\004\100\135\001\002" +
    "\000\060\003\uff91\023\uff91\054\uff91\055\uff91\057\uff91\060" +
    "\uff91\071\uff91\074\uff91\101\uff91\102\uff91\103\uff91\104\uff91" +
    "\105\uff91\106\uff91\107\uff91\111\uff91\112\uff91\113\uff91\114" +
    "\uff91\115\uff91\116\uff91\117\uff91\120\uff91\001\002\000\060" +
    "\003\uff8e\023\uff8e\054\uff8e\055\uff8e\057\uff8e\060\uff8e\071" +
    "\uff8e\074\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\107\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115" +
    "\uff8e\116\uff8e\117\uff8e\120\uff8e\001\002\000\102\003\ufff8" +
    "\012\ufff8\023\ufff8\032\133\054\ufff8\055\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8\066\ufff8\067\ufff8" +
    "\071\ufff8\072\ufff8\074\ufff8\101\ufff8\102\ufff8\103\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\107\ufff8\111\ufff8\112\ufff8\113\ufff8" +
    "\114\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\001\002\000" +
    "\042\003\uff84\023\uff84\054\uff84\055\uff84\057\uff84\060\uff84" +
    "\071\uff84\074\uff84\101\uff84\102\uff84\111\125\112\127\113" +
    "\126\114\uff84\115\uff84\117\uff84\001\002\000\030\003\uffab" +
    "\023\uffab\054\uffab\055\uffab\057\uffab\071\uffab\074\uffab\102" +
    "\uffab\114\114\115\uffab\117\uffab\001\002\000\016\103\105" +
    "\104\106\105\104\106\112\107\107\120\111\001\002\000" +
    "\020\046\065\050\061\051\067\100\073\110\064\115\063" +
    "\121\057\001\002\000\004\101\075\001\002\000\042\003" +
    "\uff7c\023\uff7c\054\uff7c\055\uff7c\057\uff7c\060\uff7c\071\uff7c" +
    "\074\uff7c\101\uff7c\102\uff7c\111\076\112\100\113\077\114" +
    "\uff7c\115\uff7c\117\uff7c\001\002\000\020\046\065\050\061" +
    "\051\067\100\073\110\064\115\063\121\057\001\002\000" +
    "\020\046\065\050\061\051\067\100\073\110\064\115\063" +
    "\121\057\001\002\000\020\046\065\050\061\051\067\100" +
    "\073\110\064\115\063\121\057\001\002\000\034\003\uff7b" +
    "\023\uff7b\054\uff7b\055\uff7b\057\uff7b\060\uff7b\071\uff7b\074" +
    "\uff7b\101\uff7b\102\uff7b\114\uff7b\115\uff7b\117\uff7b\001\002" +
    "\000\034\003\uff7a\023\uff7a\054\uff7a\055\uff7a\057\uff7a\060" +
    "\uff7a\071\uff7a\074\uff7a\101\uff7a\102\uff7a\114\uff7a\115\uff7a" +
    "\117\uff7a\001\002\000\034\003\uff79\023\uff79\054\uff79\055" +
    "\uff79\057\uff79\060\uff79\071\uff79\074\uff79\101\uff79\102\uff79" +
    "\114\uff79\115\uff79\117\uff79\001\002\000\014\046\uff86\050" +
    "\uff86\051\uff86\115\uff86\121\uff86\001\002\000\014\046\uff89" +
    "\050\uff89\051\uff89\115\uff89\121\uff89\001\002\000\014\046" +
    "\uff8a\050\uff8a\051\uff8a\115\uff8a\121\uff8a\001\002\000\014" +
    "\046\uff88\050\uff88\051\uff88\115\uff88\121\uff88\001\002\000" +
    "\014\046\065\050\061\051\067\115\063\121\057\001\002" +
    "\000\014\046\uff85\050\uff85\051\uff85\115\uff85\121\uff85\001" +
    "\002\000\014\046\uff87\050\uff87\051\uff87\115\uff87\121\uff87" +
    "\001\002\000\042\003\uff8d\023\uff8d\054\uff8d\055\uff8d\057" +
    "\uff8d\060\uff8d\071\uff8d\074\uff8d\101\uff8d\102\uff8d\111\uff8d" +
    "\112\uff8d\113\uff8d\114\uff8d\115\uff8d\117\uff8d\001\002\000" +
    "\060\002\uffac\003\uffac\012\uffac\023\uffac\047\uffac\054\uffac" +
    "\055\uffac\057\uffac\061\uffac\062\uffac\063\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\102\uffac\115\uffac\117\uffac\122\uffac\001\002\000\026\003" +
    "\051\023\006\054\047\055\055\057\031\071\116\074\042" +
    "\102\053\115\052\117\032\001\002\000\004\056\123\001" +
    "\002\000\004\071\120\001\002\000\004\056\121\001\002" +
    "\000\046\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab\057" +
    "\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab" +
    "\072\uffab\074\uffab\102\uffab\114\114\115\uffab\117\uffab\001" +
    "\002\000\044\003\uffaf\012\uffaf\023\uffaf\054\uffaf\055\uffaf" +
    "\057\uffaf\062\uffaf\063\uffaf\065\uffaf\066\uffaf\067\uffaf\071" +
    "\uffaf\072\uffaf\074\uffaf\102\uffaf\115\uffaf\117\uffaf\001\002" +
    "\000\046\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab\057" +
    "\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab" +
    "\072\uffab\074\uffab\102\uffab\114\114\115\uffab\117\uffab\001" +
    "\002\000\044\003\uffad\012\uffad\023\uffad\054\uffad\055\uffad" +
    "\057\uffad\062\uffad\063\uffad\065\uffad\066\uffad\067\uffad\071" +
    "\uffad\072\uffad\074\uffad\102\uffad\115\uffad\117\uffad\001\002" +
    "\000\020\046\065\050\061\051\067\100\073\110\064\115" +
    "\063\121\057\001\002\000\020\046\065\050\061\051\067" +
    "\100\073\110\064\115\063\121\057\001\002\000\020\046" +
    "\065\050\061\051\067\100\073\110\064\115\063\121\057" +
    "\001\002\000\034\003\uff7f\023\uff7f\054\uff7f\055\uff7f\057" +
    "\uff7f\060\uff7f\071\uff7f\074\uff7f\101\uff7f\102\uff7f\114\uff7f" +
    "\115\uff7f\117\uff7f\001\002\000\034\003\uff7e\023\uff7e\054" +
    "\uff7e\055\uff7e\057\uff7e\060\uff7e\071\uff7e\074\uff7e\101\uff7e" +
    "\102\uff7e\114\uff7e\115\uff7e\117\uff7e\001\002\000\034\003" +
    "\uff7d\023\uff7d\054\uff7d\055\uff7d\057\uff7d\060\uff7d\071\uff7d" +
    "\074\uff7d\101\uff7d\102\uff7d\114\uff7d\115\uff7d\117\uff7d\001" +
    "\002\000\004\051\067\001\002\000\100\003\ufff9\012\ufff9" +
    "\023\ufff9\054\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9" +
    "\074\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\106" +
    "\ufff9\107\ufff9\111\ufff9\112\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\001\002\000\020\046\065\050" +
    "\061\051\067\100\073\110\064\115\063\121\057\001\002" +
    "\000\004\101\137\001\002\000\042\003\uff83\023\uff83\054" +
    "\uff83\055\uff83\057\uff83\060\uff83\071\uff83\074\uff83\101\uff83" +
    "\102\uff83\111\140\112\142\113\141\114\uff83\115\uff83\117" +
    "\uff83\001\002\000\020\046\065\050\061\051\067\100\073" +
    "\110\064\115\063\121\057\001\002\000\020\046\065\050" +
    "\061\051\067\100\073\110\064\115\063\121\057\001\002" +
    "\000\020\046\065\050\061\051\067\100\073\110\064\115" +
    "\063\121\057\001\002\000\034\003\uff82\023\uff82\054\uff82" +
    "\055\uff82\057\uff82\060\uff82\071\uff82\074\uff82\101\uff82\102" +
    "\uff82\114\uff82\115\uff82\117\uff82\001\002\000\034\003\uff81" +
    "\023\uff81\054\uff81\055\uff81\057\uff81\060\uff81\071\uff81\074" +
    "\uff81\101\uff81\102\uff81\114\uff81\115\uff81\117\uff81\001\002" +
    "\000\034\003\uff80\023\uff80\054\uff80\055\uff80\057\uff80\060" +
    "\uff80\071\uff80\074\uff80\101\uff80\102\uff80\114\uff80\115\uff80" +
    "\117\uff80\001\002\000\030\003\uffab\023\uffab\054\uffab\055" +
    "\uffab\057\uffab\071\uffab\074\uffab\102\uffab\114\114\115\uffab" +
    "\117\uffab\001\002\000\026\003\051\023\006\054\047\055" +
    "\055\057\031\071\150\074\042\102\053\115\052\117\032" +
    "\001\002\000\046\003\uffab\012\uffab\023\uffab\054\uffab\055" +
    "\uffab\057\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab" +
    "\071\uffab\072\uffab\074\uffab\102\uffab\114\114\115\uffab\117" +
    "\uffab\001\002\000\004\071\152\001\002\000\046\003\uffab" +
    "\012\uffab\023\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063" +
    "\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab" +
    "\102\uffab\114\114\115\uffab\117\uffab\001\002\000\044\003" +
    "\uffb0\012\uffb0\023\uffb0\054\uffb0\055\uffb0\057\uffb0\062\uffb0" +
    "\063\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\072\uffb0\074" +
    "\uffb0\102\uffb0\115\uffb0\117\uffb0\001\002\000\044\003\uffae" +
    "\012\uffae\023\uffae\054\uffae\055\uffae\057\uffae\062\uffae\063" +
    "\uffae\065\uffae\066\uffae\067\uffae\071\uffae\072\uffae\074\uffae" +
    "\102\uffae\115\uffae\117\uffae\001\002\000\030\003\uffab\023" +
    "\uffab\054\uffab\055\uffab\057\uffab\065\uffab\074\uffab\102\uffab" +
    "\114\114\115\uffab\117\uffab\001\002\000\020\046\065\050" +
    "\061\051\067\100\073\110\064\115\063\121\057\001\002" +
    "\000\010\062\155\063\156\065\uffb7\001\002\000\004\065" +
    "\uffb9\001\002\000\004\065\uffb8\001\002\000\004\065\163" +
    "\001\002\000\046\003\uffab\012\uffab\023\uffab\054\uffab\055" +
    "\uffab\057\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab" +
    "\071\uffab\072\uffab\074\uffab\102\uffab\114\114\115\uffab\117" +
    "\uffab\001\002\000\044\003\uffbb\012\uffbb\023\uffbb\054\uffbb" +
    "\055\uffbb\057\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\071\uffbb\072\uffbb\074\uffbb\102\uffbb\115\uffbb\117\uffbb" +
    "\001\002\000\004\065\166\001\002\000\046\003\uffab\012" +
    "\uffab\023\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab" +
    "\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102" +
    "\uffab\114\114\115\uffab\117\uffab\001\002\000\044\003\uffbc" +
    "\012\uffbc\023\uffbc\054\uffbc\055\uffbc\057\uffbc\062\uffbc\063" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\071\uffbc\072\uffbc\074\uffbc" +
    "\102\uffbc\115\uffbc\117\uffbc\001\002\000\004\060\171\001" +
    "\002\000\034\003\uffab\023\uffab\054\uffab\055\uffab\057\uffab" +
    "\062\uffab\063\uffab\065\uffab\074\uffab\102\uffab\114\114\115" +
    "\uffab\117\uffab\001\002\000\032\003\051\023\006\054\047" +
    "\055\055\057\031\062\155\063\156\065\uffb7\074\042\102" +
    "\053\115\052\117\032\001\002\000\010\062\155\063\156" +
    "\065\uffb7\001\002\000\004\065\uffb3\001\002\000\004\065" +
    "\uffb4\001\002\000\026\003\051\023\006\054\047\055\055" +
    "\057\031\065\uffb5\074\042\102\053\115\052\117\032\001" +
    "\002\000\004\065\uffb6\001\002\000\004\115\201\001\002" +
    "\000\004\101\202\001\002\000\046\003\uffab\012\uffab\023" +
    "\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab\065\uffab" +
    "\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114" +
    "\114\115\uffab\117\uffab\001\002\000\044\003\uffe4\012\uffe4" +
    "\023\uffe4\054\uffe4\055\uffe4\057\uffe4\062\uffe4\063\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\071\uffe4\072\uffe4\074\uffe4\102\uffe4" +
    "\115\uffe4\117\uffe4\001\002\000\026\003\240\025\245\026" +
    "\244\046\065\050\061\051\067\101\uffa1\115\237\116\uffa1" +
    "\121\057\001\002\000\004\115\270\001\002\000\014\046" +
    "\214\051\067\100\207\115\210\121\211\001\002\000\010" +
    "\046\214\100\207\115\210\001\002\000\070\003\uff70\004" +
    "\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\023\uff70" +
    "\054\uff70\055\uff70\057\uff70\061\uff70\062\uff70\063\uff70\065" +
    "\uff70\066\uff70\067\uff70\071\uff70\072\uff70\074\uff70\075\234" +
    "\100\233\101\uff70\102\uff70\114\uff70\115\uff70\117\uff70\001" +
    "\002\000\050\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab" +
    "\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067" +
    "\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114\114\115\uffab" +
    "\117\uffab\001\002\000\050\003\uffab\012\uffab\023\uffab\054" +
    "\uffab\055\uffab\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab" +
    "\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114" +
    "\114\115\uffab\117\uffab\001\002\000\062\003\uff78\004\221" +
    "\006\222\007\220\010\216\011\217\012\uff78\023\uff78\054" +
    "\uff78\055\uff78\057\uff78\061\uff78\062\uff78\063\uff78\065\uff78" +
    "\066\uff78\067\uff78\071\uff78\072\uff78\074\uff78\102\uff78\114" +
    "\uff78\115\uff78\117\uff78\001\002\000\064\003\uff71\004\uff71" +
    "\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\023\uff71\054" +
    "\uff71\055\uff71\057\uff71\061\uff71\062\uff71\063\uff71\065\uff71" +
    "\066\uff71\067\uff71\071\uff71\072\uff71\074\uff71\101\uff71\102" +
    "\uff71\114\uff71\115\uff71\117\uff71\001\002\000\050\003\uffab" +
    "\012\uffab\023\uffab\054\uffab\055\uffab\057\uffab\061\uffab\062" +
    "\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab" +
    "\074\uffab\102\uffab\114\114\115\uffab\117\uffab\001\002\000" +
    "\010\046\214\100\207\115\210\001\002\000\010\046\214" +
    "\100\207\115\210\001\002\000\010\046\214\100\207\115" +
    "\210\001\002\000\010\046\214\100\207\115\210\001\002" +
    "\000\010\046\214\100\207\115\210\001\002\000\064\003" +
    "\uff6d\004\221\006\uff6d\007\uff6d\010\216\011\217\012\uff6d" +
    "\023\uff6d\054\uff6d\055\uff6d\057\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\065\uff6d\066\uff6d\067\uff6d\071\uff6d\072\uff6d\074\uff6d" +
    "\101\uff6d\102\uff6d\114\uff6d\115\uff6d\117\uff6d\001\002\000" +
    "\064\003\uff69\004\uff69\006\uff69\007\uff69\010\uff69\011\uff69" +
    "\012\uff69\023\uff69\054\uff69\055\uff69\057\uff69\061\uff69\062" +
    "\uff69\063\uff69\065\uff69\066\uff69\067\uff69\071\uff69\072\uff69" +
    "\074\uff69\101\uff69\102\uff69\114\uff69\115\uff69\117\uff69\001" +
    "\002\000\064\003\uff6c\004\221\006\uff6c\007\uff6c\010\216" +
    "\011\217\012\uff6c\023\uff6c\054\uff6c\055\uff6c\057\uff6c\061" +
    "\uff6c\062\uff6c\063\uff6c\065\uff6c\066\uff6c\067\uff6c\071\uff6c" +
    "\072\uff6c\074\uff6c\101\uff6c\102\uff6c\114\uff6c\115\uff6c\117" +
    "\uff6c\001\002\000\064\003\uff6a\004\221\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\023\uff6a\054\uff6a\055\uff6a\057" +
    "\uff6a\061\uff6a\062\uff6a\063\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\071\uff6a\072\uff6a\074\uff6a\101\uff6a\102\uff6a\114\uff6a\115" +
    "\uff6a\117\uff6a\001\002\000\064\003\uff6b\004\221\006\uff6b" +
    "\007\uff6b\010\uff6b\011\uff6b\012\uff6b\023\uff6b\054\uff6b\055" +
    "\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\071\uff6b\072\uff6b\074\uff6b\101\uff6b\102\uff6b\114" +
    "\uff6b\115\uff6b\117\uff6b\001\002\000\046\003\uff77\012\uff77" +
    "\023\uff77\054\uff77\055\uff77\057\uff77\061\uff77\062\uff77\063" +
    "\uff77\065\uff77\066\uff77\067\uff77\071\uff77\072\uff77\074\uff77" +
    "\102\uff77\115\uff77\117\uff77\001\002\000\046\003\uff75\012" +
    "\uff75\023\uff75\054\uff75\055\uff75\057\uff75\061\uff75\062\uff75" +
    "\063\uff75\065\uff75\066\uff75\067\uff75\071\uff75\072\uff75\074" +
    "\uff75\102\uff75\115\uff75\117\uff75\001\002\000\046\003\uff76" +
    "\012\uff76\023\uff76\054\uff76\055\uff76\057\uff76\061\uff76\062" +
    "\uff76\063\uff76\065\uff76\066\uff76\067\uff76\071\uff76\072\uff76" +
    "\074\uff76\102\uff76\115\uff76\117\uff76\001\002\000\026\003" +
    "\240\025\245\026\244\046\065\050\061\051\067\101\uffa1" +
    "\115\237\116\uffa1\121\057\001\002\000\004\115\235\001" +
    "\002\000\064\003\uff6f\004\uff6f\006\uff6f\007\uff6f\010\uff6f" +
    "\011\uff6f\012\uff6f\023\uff6f\054\uff6f\055\uff6f\057\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\065\uff6f\066\uff6f\067\uff6f\071\uff6f" +
    "\072\uff6f\074\uff6f\101\uff6f\102\uff6f\114\uff6f\115\uff6f\117" +
    "\uff6f\001\002\000\006\101\265\116\262\001\002\000\012" +
    "\022\250\100\260\101\uff8c\116\uff8c\001\002\000\006\101" +
    "\uff92\116\uff92\001\002\000\006\101\uffa2\116\uffa2\001\002" +
    "\000\006\101\uff96\116\uff96\001\002\000\006\101\uff97\116" +
    "\uff97\001\002\000\006\003\240\115\246\001\002\000\006" +
    "\003\240\115\246\001\002\000\004\022\250\001\002\000" +
    "\006\101\uff99\116\uff99\001\002\000\014\042\253\043\251" +
    "\044\254\045\256\115\252\001\002\000\064\003\uffa6\012" +
    "\uffa6\023\uffa6\047\uffa6\054\uffa6\055\uffa6\057\uffa6\062\uffa6" +
    "\063\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\101\uffa6\102\uffa6\114\uffa6\115\uffa6" +
    "\116\uffa6\117\uffa6\120\uffa6\122\uffa6\001\002\000\006\101" +
    "\uff93\116\uff93\001\002\000\064\003\uffa7\012\uffa7\023\uffa7" +
    "\047\uffa7\054\uffa7\055\uffa7\057\uffa7\062\uffa7\063\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\101\uffa7\102\uffa7\114\uffa7\115\uffa7\116\uffa7\117" +
    "\uffa7\120\uffa7\122\uffa7\001\002\000\064\003\uffa5\012\uffa5" +
    "\023\uffa5\047\uffa5\054\uffa5\055\uffa5\057\uffa5\062\uffa5\063" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\101\uffa5\102\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\122\uffa5\001\002\000\006\101\uff94" +
    "\116\uff94\001\002\000\064\003\uffa4\012\uffa4\023\uffa4\047" +
    "\uffa4\054\uffa4\055\uffa4\057\uffa4\062\uffa4\063\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\101\uffa4\102\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4" +
    "\120\uffa4\122\uffa4\001\002\000\006\101\uff98\116\uff98\001" +
    "\002\000\026\003\240\025\245\026\244\046\065\050\061" +
    "\051\067\101\uffa1\115\237\116\uffa1\121\057\001\002\000" +
    "\006\101\263\116\262\001\002\000\022\003\240\025\245" +
    "\026\244\046\065\050\061\051\067\115\237\121\057\001" +
    "\002\000\006\101\uff95\116\uff95\001\002\000\006\101\uffa3" +
    "\116\uffa3\001\002\000\064\003\uff6e\004\uff6e\006\uff6e\007" +
    "\uff6e\010\uff6e\011\uff6e\012\uff6e\023\uff6e\054\uff6e\055\uff6e" +
    "\057\uff6e\061\uff6e\062\uff6e\063\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\071\uff6e\072\uff6e\074\uff6e\101\uff6e\102\uff6e\114\uff6e" +
    "\115\uff6e\117\uff6e\001\002\000\016\004\221\006\222\007" +
    "\220\010\216\011\217\101\267\001\002\000\064\003\uff68" +
    "\004\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\023" +
    "\uff68\054\uff68\055\uff68\057\uff68\061\uff68\062\uff68\063\uff68" +
    "\065\uff68\066\uff68\067\uff68\071\uff68\072\uff68\074\uff68\101" +
    "\uff68\102\uff68\114\uff68\115\uff68\117\uff68\001\002\000\050" +
    "\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab\057\uffab\062" +
    "\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab" +
    "\074\uffab\102\uffab\114\114\115\uffab\117\uffab\120\272\001" +
    "\002\000\044\003\uffc0\012\uffc0\023\uffc0\054\uffc0\055\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\065\uffc0\066\uffc0\067\uffc0\071" +
    "\uffc0\072\uffc0\074\uffc0\102\uffc0\115\uffc0\117\uffc0\001\002" +
    "\000\014\046\214\051\067\100\207\115\210\121\273\001" +
    "\002\000\050\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab" +
    "\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067" +
    "\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114\114\115\uffab" +
    "\117\uffab\001\002\000\062\003\uffab\004\221\006\222\007" +
    "\220\010\216\011\217\012\uffab\023\uffab\054\uffab\055\uffab" +
    "\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067" +
    "\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114\114\115\uffab" +
    "\117\uffab\001\002\000\050\003\uffab\012\uffab\023\uffab\054" +
    "\uffab\055\uffab\057\uffab\061\uffab\062\uffab\063\uffab\065\uffab" +
    "\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114" +
    "\114\115\uffab\117\uffab\001\002\000\046\003\uff72\012\uff72" +
    "\023\uff72\054\uff72\055\uff72\057\uff72\061\uff72\062\uff72\063" +
    "\uff72\065\uff72\066\uff72\067\uff72\071\uff72\072\uff72\074\uff72" +
    "\102\uff72\115\uff72\117\uff72\001\002\000\046\003\uff74\012" +
    "\uff74\023\uff74\054\uff74\055\uff74\057\uff74\061\uff74\062\uff74" +
    "\063\uff74\065\uff74\066\uff74\067\uff74\071\uff74\072\uff74\074" +
    "\uff74\102\uff74\115\uff74\117\uff74\001\002\000\046\003\uff73" +
    "\012\uff73\023\uff73\054\uff73\055\uff73\057\uff73\061\uff73\062" +
    "\uff73\063\uff73\065\uff73\066\uff73\067\uff73\071\uff73\072\uff73" +
    "\074\uff73\102\uff73\115\uff73\117\uff73\001\002\000\006\101" +
    "\302\116\262\001\002\000\046\003\uffab\012\uffab\023\uffab" +
    "\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab\065\uffab\066" +
    "\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114\114" +
    "\115\uffab\117\uffab\001\002\000\044\003\uffe3\012\uffe3\023" +
    "\uffe3\054\uffe3\055\uffe3\057\uffe3\062\uffe3\063\uffe3\065\uffe3" +
    "\066\uffe3\067\uffe3\071\uffe3\072\uffe3\074\uffe3\102\uffe3\115" +
    "\uffe3\117\uffe3\001\002\000\044\003\uffca\012\uffca\023\uffca" +
    "\054\uffca\055\uffca\057\uffca\062\uffca\063\uffca\065\uffca\066" +
    "\uffca\067\uffca\071\uffca\072\uffca\074\uffca\102\uffca\115\uffca" +
    "\117\uffca\001\002\000\004\060\306\001\002\000\034\003" +
    "\uffab\023\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab" +
    "\065\uffab\074\uffab\102\uffab\114\114\115\uffab\117\uffab\001" +
    "\002\000\032\003\uffba\023\uffba\054\uffba\055\uffba\057\uffba" +
    "\062\uffba\063\uffba\065\uffba\074\uffba\102\uffba\115\uffba\117" +
    "\uffba\001\002\000\052\003\uffe9\012\uffe9\023\uffe9\054\uffe9" +
    "\055\uffe9\057\uffe9\062\uffe9\063\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\071\uffe9\072\uffe9\074\uffe9\075\316\100\315\102\uffe9" +
    "\114\uffe9\115\uffe9\117\uffe9\001\002\000\046\003\uffab\012" +
    "\uffab\023\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab" +
    "\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102" +
    "\uffab\114\114\115\uffab\117\uffab\001\002\000\046\003\uffe6" +
    "\012\uffe6\023\uffe6\054\uffe6\055\uffe6\057\uffe6\062\uffe6\063" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6\072\uffe6\074\uffe6" +
    "\102\uffe6\114\uffe6\115\uffe6\117\uffe6\001\002\000\046\003" +
    "\uffe7\012\uffe7\023\uffe7\054\uffe7\055\uffe7\057\uffe7\062\uffe7" +
    "\063\uffe7\065\uffe7\066\uffe7\067\uffe7\071\uffe7\072\uffe7\074" +
    "\uffe7\102\uffe7\114\uffe7\115\uffe7\117\uffe7\001\002\000\044" +
    "\003\uffea\012\uffea\023\uffea\054\uffea\055\uffea\057\uffea\062" +
    "\uffea\063\uffea\065\uffea\066\uffea\067\uffea\071\uffea\072\uffea" +
    "\074\uffea\102\uffea\115\uffea\117\uffea\001\002\000\026\003" +
    "\240\025\245\026\244\046\065\050\061\051\067\101\uffa1" +
    "\115\237\116\uffa1\121\057\001\002\000\004\115\317\001" +
    "\002\000\046\003\uffe5\012\uffe5\023\uffe5\054\uffe5\055\uffe5" +
    "\057\uffe5\062\uffe5\063\uffe5\065\uffe5\066\uffe5\067\uffe5\071" +
    "\uffe5\072\uffe5\074\uffe5\102\uffe5\114\uffe5\115\uffe5\117\uffe5" +
    "\001\002\000\006\101\321\116\262\001\002\000\046\003" +
    "\uffe8\012\uffe8\023\uffe8\054\uffe8\055\uffe8\057\uffe8\062\uffe8" +
    "\063\uffe8\065\uffe8\066\uffe8\067\uffe8\071\uffe8\072\uffe8\074" +
    "\uffe8\102\uffe8\114\uffe8\115\uffe8\117\uffe8\001\002\000\014" +
    "\002\uffed\003\uffed\047\uffed\073\uffed\122\uffed\001\002\000" +
    "\016\002\uffab\003\uffab\047\uffab\073\uffab\114\114\122\uffab" +
    "\001\002\000\014\002\uffee\003\uffee\047\uffee\073\uffee\122" +
    "\uffee\001\002\000\022\012\uffcd\062\uffcd\063\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\071\uffcd\072\uffcd\001\002\000\044\003" +
    "\uffd6\012\uffd6\023\uffd6\054\uffd6\055\uffd6\057\uffd6\062\uffd6" +
    "\063\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\072\uffd6\074" +
    "\uffd6\102\uffd6\115\uffd6\117\uffd6\001\002\000\004\120\330" +
    "\001\002\000\004\115\331\001\002\000\006\075\344\120" +
    "\206\001\002\000\004\061\333\001\002\000\004\115\331" +
    "\001\002\000\026\003\051\023\006\054\047\055\055\057" +
    "\031\072\336\074\042\102\053\115\052\117\032\001\002" +
    "\000\004\072\341\001\002\000\004\115\337\001\002\000" +
    "\046\003\uffab\012\uffab\023\uffab\054\uffab\055\uffab\057\uffab" +
    "\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072" +
    "\uffab\074\uffab\102\uffab\114\114\115\uffab\117\uffab\001\002" +
    "\000\044\003\uffb1\012\uffb1\023\uffb1\054\uffb1\055\uffb1\057" +
    "\uffb1\062\uffb1\063\uffb1\065\uffb1\066\uffb1\067\uffb1\071\uffb1" +
    "\072\uffb1\074\uffb1\102\uffb1\115\uffb1\117\uffb1\001\002\000" +
    "\004\115\342\001\002\000\046\003\uffab\012\uffab\023\uffab" +
    "\054\uffab\055\uffab\057\uffab\062\uffab\063\uffab\065\uffab\066" +
    "\uffab\067\uffab\071\uffab\072\uffab\074\uffab\102\uffab\114\114" +
    "\115\uffab\117\uffab\001\002\000\044\003\uffb2\012\uffb2\023" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\062\uffb2\063\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\071\uffb2\072\uffb2\074\uffb2\102\uffb2\115" +
    "\uffb2\117\uffb2\001\002\000\004\115\345\001\002\000\004" +
    "\120\272\001\002\000\014\002\ufffd\003\020\047\011\073" +
    "\023\122\013\001\002\000\014\002\ufffe\003\020\047\011" +
    "\073\023\122\013\001\002\000\014\002\ufffb\003\020\047" +
    "\011\073\023\122\013\001\002\000\014\002\uffef\003\uffef" +
    "\047\uffef\073\uffef\122\uffef\001\002\000\012\042\253\043" +
    "\251\044\254\045\256\001\002\000\026\003\051\023\006" +
    "\054\047\055\055\057\031\067\355\074\042\102\053\115" +
    "\052\117\032\001\002\000\004\067\357\001\002\000\016" +
    "\002\uffab\003\uffab\047\uffab\073\uffab\114\114\122\uffab\001" +
    "\002\000\014\002\uffdd\003\uffdd\047\uffdd\073\uffdd\122\uffdd" +
    "\001\002\000\016\002\uffab\003\uffab\047\uffab\073\uffab\114" +
    "\114\122\uffab\001\002\000\014\002\uffde\003\uffde\047\uffde" +
    "\073\uffde\122\uffde\001\002\000\032\003\uffab\012\uffab\023" +
    "\uffab\054\uffab\055\uffab\057\uffab\067\uffab\074\uffab\102\uffab" +
    "\114\114\115\uffab\117\uffab\001\002\000\030\003\051\012" +
    "\364\023\006\054\047\055\055\057\031\067\uffd7\074\042" +
    "\102\053\115\052\117\032\001\002\000\006\012\364\067" +
    "\uffd7\001\002\000\016\046\214\050\371\051\067\100\207" +
    "\115\210\121\370\001\002\000\004\067\366\001\002\000" +
    "\016\002\uffab\003\uffab\047\uffab\073\uffab\114\114\122\uffab" +
    "\001\002\000\014\002\uffdc\003\uffdc\047\uffdc\073\uffdc\122" +
    "\uffdc\001\002\000\006\067\uffab\114\114\001\002\000\006" +
    "\067\uffab\114\114\001\002\000\006\067\uffab\114\114\001" +
    "\002\000\016\004\221\006\222\007\220\010\216\011\217" +
    "\067\uffd8\001\002\000\004\067\uffda\001\002\000\004\067" +
    "\uffd9\001\002\000\004\067\uffdb\001\002\000\004\067\u0100" +
    "\001\002\000\016\002\uffab\003\uffab\047\uffab\073\uffab\114" +
    "\114\122\uffab\001\002\000\014\002\uffdf\003\uffdf\047\uffdf" +
    "\073\uffdf\122\uffdf\001\002\000\004\100\uffe1\001\002\000" +
    "\004\100\u0104\001\002\000\026\003\240\025\245\026\244" +
    "\046\065\050\061\051\067\101\uffa1\115\237\116\uffa1\121" +
    "\057\001\002\000\006\101\u0106\116\262\001\002\000\032" +
    "\003\uffe0\022\uffe0\023\uffe0\054\uffe0\055\uffe0\057\uffe0\067" +
    "\uffe0\074\uffe0\102\uffe0\114\uffe0\115\uffe0\117\uffe0\001\002" +
    "\000\004\100\u0108\001\002\000\006\003\u0109\101\u010a\001" +
    "\002\000\004\101\u0111\001\002\000\030\003\uffab\023\uffab" +
    "\054\uffab\055\uffab\057\uffab\066\uffab\074\uffab\102\uffab\114" +
    "\114\115\uffab\117\uffab\001\002\000\026\003\051\023\006" +
    "\054\047\055\055\057\031\066\u010d\074\042\102\053\115" +
    "\052\117\032\001\002\000\004\066\u010f\001\002\000\016" +
    "\002\uffab\003\uffab\047\uffab\073\uffab\114\114\122\uffab\001" +
    "\002\000\014\002\uffa8\003\uffa8\047\uffa8\073\uffa8\122\uffa8" +
    "\001\002\000\016\002\uffab\003\uffab\047\uffab\073\uffab\114" +
    "\114\122\uffab\001\002\000\014\002\uffa9\003\uffa9\047\uffa9" +
    "\073\uffa9\122\uffa9\001\002\000\026\003\uffab\023\uffab\054" +
    "\uffab\055\uffab\057\uffab\074\uffab\102\uffab\114\114\115\uffab" +
    "\117\uffab\001\002\000\024\003\051\023\006\054\047\055" +
    "\055\057\031\074\042\102\053\115\052\117\032\001\002" +
    "\000\004\066\u0114\001\002\000\016\002\uffab\003\uffab\047" +
    "\uffab\073\uffab\114\114\122\uffab\001\002\000\014\002\uffaa" +
    "\003\uffaa\047\uffaa\073\uffaa\122\uffaa\001\002\000\010\070" +
    "\uffab\114\114\115\uffab\001\002\000\006\070\ufff2\115\u0119" +
    "\001\002\000\010\070\uffab\114\114\115\uffab\001\002\000" +
    "\004\022\u011d\001\002\000\004\070\u011b\001\002\000\016" +
    "\002\uffab\003\uffab\047\uffab\073\uffab\114\114\122\uffab\001" +
    "\002\000\014\002\ufff4\003\ufff4\047\ufff4\073\ufff4\122\ufff4" +
    "\001\002\000\014\042\253\043\251\044\254\045\256\115" +
    "\u011e\001\002\000\010\070\ufff0\114\ufff0\115\ufff0\001\002" +
    "\000\010\070\ufff1\114\ufff1\115\ufff1\001\002\000\006\070" +
    "\ufff2\115\u0119\001\002\000\004\070\ufff3\001\002\000\004" +
    "\002\000\001\002\000\062\003\uffcf\012\uffcf\022\u012d\023" +
    "\uffcf\047\uffcf\054\uffcf\055\uffcf\057\uffcf\062\uffcf\063\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\102\uffcf\114\uffcf\115\uffcf\116\u012e\117\uffcf\120\uffcf" +
    "\122\uffcf\001\002\000\060\003\uffbd\012\uffbd\023\uffbd\047" +
    "\uffbd\054\uffbd\055\uffbd\057\uffbd\062\uffbd\063\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\102" +
    "\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\122\uffbd" +
    "\001\002\000\060\003\uffd2\012\uffd2\023\uffd2\047\uffd2\054" +
    "\uffd2\055\uffd2\057\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\102\uffd2\114" +
    "\uffd2\115\uffd2\116\u012b\117\uffd2\120\uffd2\122\uffd2\001\002" +
    "\000\056\003\uffab\012\uffab\023\uffab\047\uffab\054\uffab\055" +
    "\uffab\057\uffab\062\uffab\063\uffab\065\uffab\066\uffab\067\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\102\uffab\114\114\115" +
    "\uffab\117\uffab\120\u0128\122\uffab\001\002\000\052\003\uffd4" +
    "\012\uffd4\023\uffd4\047\uffd4\054\uffd4\055\uffd4\057\uffd4\062" +
    "\uffd4\063\uffd4\065\uffd4\066\uffd4\067\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\102\uffd4\115\uffd4\117\uffd4\122\uffd4\001" +
    "\002\000\004\046\u0129\001\002\000\054\003\uffab\012\uffab" +
    "\023\uffab\047\uffab\054\uffab\055\uffab\057\uffab\062\uffab\063" +
    "\uffab\065\uffab\066\uffab\067\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\102\uffab\114\114\115\uffab\117\uffab\122\uffab\001" +
    "\002\000\052\003\uffd3\012\uffd3\023\uffd3\047\uffd3\054\uffd3" +
    "\055\uffd3\057\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\067" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\102\uffd3\115\uffd3" +
    "\117\uffd3\122\uffd3\001\002\000\006\003\u0124\115\u0123\001" +
    "\002\000\056\003\uffd1\012\uffd1\023\uffd1\047\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\062\uffd1\063\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\102\uffd1\114\uffd1" +
    "\115\uffd1\117\uffd1\120\uffd1\122\uffd1\001\002\000\014\042" +
    "\253\043\251\044\254\045\256\115\u0130\001\002\000\006" +
    "\003\u0124\115\u0123\001\002\000\056\003\uffd0\012\uffd0\023" +
    "\uffd0\047\uffd0\054\uffd0\055\uffd0\057\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\102\uffd0\114\uffd0\115\uffd0\117\uffd0\120\uffd0\122\uffd0" +
    "\001\002\000\060\003\uffbe\012\uffbe\023\uffbe\047\uffbe\054" +
    "\uffbe\055\uffbe\057\uffbe\062\uffbe\063\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\102\uffbe\114" +
    "\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\122\uffbe\001\002" +
    "\000\060\003\uffbf\012\uffbf\023\uffbf\047\uffbf\054\uffbf\055" +
    "\uffbf\057\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\102\uffbf\114\uffbf\115" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\122\uffbf\001\002\000\012" +
    "\003\uffcc\047\uffcc\073\uffcc\122\uffcc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\010\002\003\003\004\044\007\001\001\000" +
    "\002\001\001\000\006\003\004\044\u0131\001\001\000\006" +
    "\004\u0124\005\u0125\001\001\000\010\002\u0121\003\004\044" +
    "\007\001\001\000\016\007\016\013\021\014\020\050\015" +
    "\052\014\060\013\001\001\000\002\001\001\000\004\051" +
    "\026\001\001\000\002\001\001\000\004\043\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\350\050\015\052\014\060\013\001\001\000\014" +
    "\007\024\013\346\050\015\052\014\060\013\001\001\000" +
    "\014\007\016\014\023\050\015\052\014\060\013\001\001" +
    "\000\004\051\026\001\001\000\012\007\024\050\015\052" +
    "\014\060\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\037\010\034\016\045\017\055\024\040\025" +
    "\032\026\053\034\044\035\047\036\027\040\035\042\042" +
    "\051\043\053\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\325\001\001\000\034\003\037\016\045" +
    "\017\055\024\324\025\032\026\053\034\044\035\047\036" +
    "\027\040\035\042\042\051\043\053\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\310\022\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\065" +
    "\023\061\032\067\033\071\054\304\001\001\000\002\001" +
    "\001\000\032\003\037\016\045\017\055\025\303\026\053" +
    "\034\044\035\047\036\027\040\035\042\042\051\043\053" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\037\016\045\017\055\024\156\025\032\026\053\027" +
    "\157\030\161\031\160\034\044\035\047\036\027\040\035" +
    "\042\042\051\043\053\033\001\001\000\014\022\065\023" +
    "\061\032\067\033\071\054\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\065\023\061\032\067\033" +
    "\071\054\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\114\001\001\000\004\015\107\001\001\000\014\022" +
    "\065\023\061\032\067\033\071\054\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\065\023\061\032" +
    "\067\033\071\054\102\001\001\000\014\022\065\023\061" +
    "\032\067\033\071\054\101\001\001\000\014\022\065\023" +
    "\061\032\067\033\071\054\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\065\023\061\033\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\037\016\045\017\055\024\116\025\032\026\053\034" +
    "\044\035\047\036\027\040\035\042\042\051\043\053\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\121\001\001\000\002\001\001\000\004" +
    "\043\123\001\001\000\002\001\001\000\014\022\065\023" +
    "\061\032\067\033\071\054\131\001\001\000\014\022\065" +
    "\023\061\032\067\033\071\054\130\001\001\000\014\022" +
    "\065\023\061\032\067\033\071\054\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\133\001\001\000\002\001\001\000\014\022\065\023\061" +
    "\032\067\033\071\054\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\065\023\061\032\067\033\071" +
    "\054\144\001\001\000\014\022\065\023\061\032\067\033" +
    "\071\054\143\001\001\000\014\022\065\023\061\032\067" +
    "\033\071\054\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\146\001\001\000\034" +
    "\003\037\016\045\017\055\024\150\025\032\026\053\034" +
    "\044\035\047\036\027\040\035\042\042\051\043\053\033" +
    "\001\001\000\004\043\153\001\001\000\002\001\001\000" +
    "\004\043\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\175\001\001\000\014\022\065\023\061\032" +
    "\067\033\071\054\167\001\001\000\010\027\157\030\164" +
    "\031\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\171\001\001\000\042" +
    "\003\037\016\045\017\055\024\172\025\032\026\053\027" +
    "\157\030\173\031\160\034\044\035\047\036\027\040\035" +
    "\042\042\051\043\053\033\001\001\000\010\027\157\030" +
    "\174\031\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\037\016\045\017\055\024\176\025\032\026" +
    "\053\034\044\035\047\036\027\040\035\042\042\051\043" +
    "\053\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\202\001\001\000\002\001\001" +
    "\000\016\011\300\012\240\022\065\023\061\033\241\047" +
    "\242\001\001\000\002\001\001\000\006\022\211\037\212" +
    "\001\001\000\004\037\265\001\001\000\002\001\001\000" +
    "\004\043\231\001\001\000\004\043\230\001\001\000\004" +
    "\062\214\001\001\000\002\001\001\000\004\043\227\001" +
    "\001\000\004\037\226\001\001\000\004\037\225\001\001" +
    "\000\004\037\224\001\001\000\004\037\223\001\001\000" +
    "\004\037\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\235\012\240\022\065\023\061\033\241\047\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\256\001\001" +
    "\000\004\047\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\260" +
    "\012\240\022\065\023\061\033\241\047\242\001\001\000" +
    "\002\001\001\000\014\012\263\022\065\023\061\033\241" +
    "\047\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\270\001\001\000\002\001\001\000\006\022\274\037" +
    "\273\001\001\000\004\043\277\001\001\000\004\043\276" +
    "\001\001\000\004\043\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\317" +
    "\012\240\022\065\023\061\033\241\047\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\333\001\001\000\034\003\037" +
    "\016\045\017\055\024\334\025\032\026\053\034\044\035" +
    "\047\036\027\040\035\042\042\051\043\053\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\350\050\015\052\014\060\013\001\001" +
    "\000\014\007\016\014\347\050\015\052\014\060\013\001" +
    "\001\000\012\007\024\050\015\052\014\060\013\001\001" +
    "\000\002\001\001\000\004\006\360\001\001\000\036\003" +
    "\037\010\353\016\045\017\055\024\040\025\032\026\053" +
    "\034\044\035\047\036\027\040\035\042\042\051\043\053" +
    "\033\001\001\000\002\001\001\000\004\043\355\001\001" +
    "\000\002\001\001\000\004\043\357\001\001\000\002\001" +
    "\001\000\004\043\361\001\001\000\040\003\037\010\362" +
    "\016\045\017\055\021\364\024\040\025\032\026\053\034" +
    "\044\035\047\036\027\040\035\042\042\051\043\053\033" +
    "\001\001\000\004\021\376\001\001\000\006\022\371\037" +
    "\372\001\001\000\002\001\001\000\004\043\366\001\001" +
    "\000\002\001\001\000\004\043\375\001\001\000\004\043" +
    "\374\001\001\000\004\043\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0100\001\001\000\002\001\001" +
    "\000\004\061\u0102\001\001\000\002\001\001\000\016\011" +
    "\u0104\012\240\022\065\023\061\033\241\047\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u010a\001\001" +
    "\000\036\003\037\010\u010b\016\045\017\055\024\040\025" +
    "\032\026\053\034\044\035\047\036\027\040\035\042\042" +
    "\051\043\053\033\001\001\000\002\001\001\000\004\043" +
    "\u010d\001\001\000\002\001\001\000\004\043\u010f\001\001" +
    "\000\002\001\001\000\004\043\u0111\001\001\000\036\003" +
    "\037\010\u0112\016\045\017\055\024\040\025\032\026\053" +
    "\034\044\035\047\036\027\040\035\042\042\051\043\053" +
    "\033\001\001\000\002\001\001\000\004\043\u0114\001\001" +
    "\000\002\001\001\000\004\043\u0116\001\001\000\006\055" +
    "\u0119\056\u0117\001\001\000\004\043\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u011b\001\001\000" +
    "\002\001\001\000\004\006\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\u0120\056\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0129\001\001" +
    "\000\002\001\001\000\006\004\u0124\005\u012b\001\001\000" +
    "\002\001\001\000\004\006\u0130\001\001\000\006\004\u0124" +
    "\005\u012e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.getScanner().next_token(); 
    }


    ArrayList<Visual_Error> erroresSintacticos = new ArrayList<Visual_Error>();
   @Override
      	public void syntax_error(Symbol cur_token) {
        System.out.println("La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.");
        report_error("Syntax error con:"+ cur_token.value + " en la linea: " + (cur_token.left+1) +", columna: " + (cur_token.right+1),null);
        erroresSintacticos.add(new Visual_Error(cur_token.left + 1, cur_token.right + 1,"La Cadena: " + cur_token.value +" en la Linea: " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)+ " esta fuera de contexto.") );
    }


public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
 // report_fatal_error(" ", null);
  //erroresSintacticos.add(new Visual_Error(-1,0,"Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1)) );
   //System.out.println("Error desconocido, se ha detenido la compilación causado por: " +cur_token.value + " en la Linea " + (cur_token.left+1) +", Columna: "+(cur_token.right+1));
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {



        Hashtable<String, Simbolos> tabla= new Hashtable<String, Simbolos>(); // tabla de simbolo
        Hashtable<String, String> Record = new Hashtable<String, String>();
        ArrayList<Type> types = new ArrayList<Type>();
        Type nuevo = new Type();
        Procedimiento proc = new Procedimiento();
        String ProcedimietnoActual="";
        int ambitoactual = 0;

//---------------------metodo tipos-------------------------
public String getTipo(String nombre, int amb,int linea,int columna){
String id,id2,n="";
id2 = nombre.toString() + "," + "0";
id= nombre.toString() + "," + String.valueOf(amb);

try{
    Simbolos sim = new Simbolos();
     if ((Simbolos)tabla.get(id) != null) {
         sim= (Simbolos)tabla.get(id);
         n= sim.getTipos().toString();
     }
     else
     {
            if ((Simbolos)tabla.get(id2) != null){
                sim= (Simbolos)tabla.get(id2);
                n= sim.getTipos().toString();
            }
            else{
                n="integer" ;  /// retorna un integer
                System.out.println( "ERROR Variable no declarada ------------------ " + nombre);
                E2(linea,columna, "Variable no declarada: " + nombre  );
            }

      }

    //System.out.println( "entro -- " + n);

}catch(Exception e){
    n="integer" ;
    //System.out.println( "noooooooooooooooooooooo-- " + n);
    System.out.println( "ERROR HASH " );

}
    return n;
}
// -------------- metodo insertar simbolo --------------------


    public void insertarSimbolo(String id, Simbolos simbolo,int linea,int columna, int ambito){
            String id1,id2;

            id1= id.toString() + "," + String.valueOf(ambito);
            id2 = id.toString() + "," + "0";

            if((tabla.get(id1)== null)  ){

               if (( tabla.get(id2)== null)  ){
                    tabla.put(id1, simbolo);
                }
                else
                {
                    E2(linea,columna, "Variable o Metodo ya declarada: " + "' "+ id.toUpperCase() + "' "  );
                }
            }
            else{
                    E2(linea,columna, "Variable o Metodo ya declarada: " + "' "+ id.toUpperCase() + "' "  );
                // System.out.println( "Variable ya declarada");


            }

System.out.println("-------------------------------------");
System.out.println("---------Tabla De Simbolo------------");
                Enumeration e = tabla.keys();
                Simbolos s=new Simbolos();
                String obj;
                int i = 1;
                   while (e.hasMoreElements()) {
                      obj = e.nextElement().toString();
                      s=tabla.get(obj);

                      System.out.println(i + "   key "+ obj +": "+ s.getTipos() +s.getTipoDeDeclaracion());
                      i+=1;
                           }
System.out.println("-------------------------------------");
        }

        public Boolean ExisteType(String a, String b){
            if (a.equals(b)){
                return true;
            }
            return false;
        }
        public void E2(int linea,int columna, String mensaje){
            System.err.println("Error Semantico [Linea: " + linea + " Columna: " + columna + "] -> " + mensaje ) ;
            //Main.errorGlobal  = true;
        }

	ArrayList<Visual_Error> erroresSintacticos2 = new ArrayList<Visual_Error>();
	public void add_error(Symbol cur_token, String falta){
		System.out.println("Se esperaba un simbolo de tipo: " + falta + " cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left +1, cur_token.right + 1,"Se esperaba un s�mbolo de tipo: " + falta + "\n cerca de la Linea: " + (cur_token.left+1) + ", Columna: "+(cur_token.right+1)));
	}
	public void add_errors(Symbol cur_token, String falta){
		System.out.println("Se esperaba el simbolo "+ falta + " para el statement de la linea " + (cur_token.left+1));
		erroresSintacticos2.add(new Visual_Error(cur_token.left+1, cur_token.right+1,"Se esperaba el simbolo "+ falta+ " para el statement de la linea "+ (cur_token.left+1) ));
	}
	public void quitar(){
		erroresSintacticos2.remove(erroresSintacticos2.size());
	}


  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // exp ::= ParIzq exp ParDer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = e.toString();
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // exp ::= exp Potencia exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // exp ::= exp Div exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // exp ::= exp Mult exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // exp ::= exp Resta exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // exp ::= exp Suma exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(e1.toString().equals(e2.toString())){RESULT=e1.toString();}else{E2(e1left+1,e1right+1,"No se Puede Asiganr dos tipos diferntes");}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // exp ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // exp ::= Id Punto Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		Boolean encontro=false;String tipo="",type="";for(int i = 0 ; i<types.size();i++){
                                
                               if(ExisteType(types.get(i).id.toString(),getTipo(id.toString(),ambitoactual,idleft+1,idright+1))){
                                type = "Instancia del Type "+types.get(i).id.toString().toUpperCase();
                                for(int j =0;j<types.get(i).listaDeInstancias.size();j++){
                                    System.out.println(types.get(i).listaDeInstancias.get(j).toString()+"      "+id1.toString());
                                    if(ExisteType(types.get(i).listaDeInstancias.get(j).toString(),id1.toString())){
                                        tipo = types.get(i).tipoDeInstancias.get(j).toString();
                                        encontro = true;
                                   }
                                }
                                }else{E2(idleft+1,idright+1,"Type no Declarado: '"+id.toString().toUpperCase()+"'");}}
                                if(encontro){RESULT = tipo;System.out.println(tipo);}else{E2(id1left+1,id1right+1,type + " no declarada: "+id1.toString().toUpperCase());}

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // exp ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 RESULT = getTipo(id.toString(),ambitoactual,idleft+1,idright+1);
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // exp ::= Entero 
            {
              Object RESULT =null;
		RESULT = "integer";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("exp",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expMat ::= Id Punto Id Asigna conca final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expMat ::= Id Punto Id Asigna TipoBoolean final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expMat ::= Id Punto Id Asigna exp final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expMat ::= Id Asigna conca final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expMat ::= Id Asigna TipoBoolean final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expMat ::= Id Asigna exp NT$1 final 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expMat",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

            if(ExisteType(getTipo(id.toString(),ambitoactual,idleft+1,idright+1),"variant")){
                Simbolos sim  = new Simbolos();
                String f = id.toString() +","+ ambitoactual;
                sim = (Simbolos)tabla.get(f);
                System.out.println("                "+ f);
                sim.setTipos(e.toString());
                System.out.println("           "+sim.getTipos()); }
            if(ExisteType(getTipo(id.toString(),ambitoactual,idleft+1,idright+1),e.toString())){
                /*generar codigo*/
            }else{
                E2(idleft+1,idright+1,"No se Puede Asiganr dos tipos diferntes");
            }
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expLog ::= ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expLog ::= ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expLog ::= ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expLog ::= ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expLog ::= condicion And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expLog ::= condicion Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expLog ::= condicion Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expLog ::= Not ParIzq expLog ParDer And expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expLog ::= Not ParIzq expLog ParDer Xor expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expLog ::= Not ParIzq expLog ParDer Or expLog 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expLog ::= Not ParIzq expLog ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expLog ::= condicion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expLog",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operadorcomp ::= Asigna 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadorcomp ::= Distinto 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadorcomp ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadorcomp ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadorcomp ::= Menor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operadorcomp ::= Mayor 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operadorcomp",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operando ::= tipos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operando ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operando",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicion ::= operando operadorcomp operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipos ::= conca 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipos ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipos ::= TipoBoolean 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipos ::= Entero 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipos",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // decvarparam ::= error 
            {
              Object RESULT =null;
		add_errors((java_cup.runtime.Symbol)CUP$Analizador$stack.peek(), "Id As Tipo");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarparam",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // decvarparam ::= Id As Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarparam",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // decvarparam ::= Id As tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarparam",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros ::= operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros ::= decvarparam 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros ::= ByRef decvarparam 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros ::= ByVal decvarparam 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // argumentos ::= Id ParIzq listarg ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("argumentos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // argumentos ::= operando 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("argumentos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // argumentos ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("argumentos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // argumentos ::= tipos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("argumentos",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // listarg ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listarg",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // listarg ::= argumentos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listarg",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // listarg ::= listarg Coma argumentos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listarg",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listparam ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listparam ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listparam ::= listparam Coma parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listparam",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo ::= Boolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT=b.toString(); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo ::= String 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT=s.toString(); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo ::= Integer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT=i.toString(); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo ::= Char 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		RESULT=c.toString(); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mainstm ::= Sub Main ParIzq ParDer final EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mainstm ::= Sub Main ParIzq ParDer final functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // mainstm ::= Sub Main ParIzq error ParDer final functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mainstm",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // final ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // final ::= EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("final",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dostm ::= Do expLog final Loop While final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dostm ::= Do While expLog final Loop final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // dostm ::= Do expLog final statementlist Loop While final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dostm ::= Do While expLog final statementlist Loop final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dostm",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // forstm ::= For Id Asigna expMat To expMat Next Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forstm ::= For Id Asigna expMat To expMat statementlist Next Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("forstm",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elseifstm ::= ElseIf expLog Then final elselist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // elseifstm ::= ElseIf expLog Then final statementlist elselist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elseifstm",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elsestm ::= Else final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elsestm ::= Else final statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elsestm",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elselist ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elselist ::= elseifstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elselist ::= elsestm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("elselist",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ifstm ::= If expLog Then final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifstm",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iflist ::= ifstm elselist EndIf final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iflist ::= ifstm statementlist elselist EndIf final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("iflist",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decvar ::= error 
            {
              Object RESULT =null;
		add_errors((java_cup.runtime.Symbol)CUP$Analizador$stack.peek(), "Id As Tipo");
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decvar ::= Id As Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            boolean declarado = false;
                            if (ProcedimietnoActual == ""){
                                for(int i = 0;i< types.size();i++){
                                    System.out.println();
                                    if (ExisteType(types.get(i).id.toString(), id1.toString())){
                                        Simbolos s = new Simbolos(id.toString(), id1.toString(), 0);
                                        s.setTipoDeDeclaracion("Declaracion de variable Estructural");
                                        s.setType(types.get(i));
                                        insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                        declarado = true;
                                    }
                                }
                            }else{
                                for(int i = 0;i< types.size();i++){
                                    if (types.get(i).id.toString() == id1.toString()){
                                        Simbolos s = new Simbolos(id.toString(), id1.toString(), ambitoactual);
                                        s.setTipoDeDeclaracion("Declaracion de variable Estructural");
                                        s.setType(types.get(i));
                                        insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                        declarado = true;
                                    }
                                }
                           } if (declarado == false)
                                    E2(id1left + 1,id1right + 1, "Type no declarado: " + "' "+ id1.toString().toUpperCase() + "' "  );
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decvar ::= Id As tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		  if (ProcedimietnoActual == ""){
                                            Simbolos s = new Simbolos(id.toString(), tp.toString(), 0);
                                            s.setTipoDeDeclaracion("Declaracion de variable Primitiva");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            }else{
                                            Simbolos s = new Simbolos(id.toString(), tp.toString(), 0);
                                            s.setTipoDeDeclaracion("Declaracion de variable Primitiva");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            } 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvar",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipotype ::= Id Punto Id final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("tipotype",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= callfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= expMat 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= leer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= escribir 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= tipotype 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= dostm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= forstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= iflist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= decvarstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= error statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dec",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec ::= decvarstm dec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dec",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statementlist ::= statement statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statementlist ::= statement 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("statementlist",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listdec ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		  Simbolos s = new Simbolos(id.toString(), "variant", 0);
                                s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listdec ::= Id Coma listdec 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		 if(ProcedimietnoActual == ""){
                                             Simbolos s = new Simbolos(id.toString(), "variant", 0);
                                             s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                            }
                                            else{Simbolos s = new Simbolos(id.toString(), "variant", ambitoactual);
                                            s.setTipoDeDeclaracion("Declaracion de variable Variant");
                                            insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                            } 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listdec ::= decvar Coma listdec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listdec ::= decvar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("listdec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decvarstm ::= Dim listdec Asigna Entero final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decvarstm ::= Dim listdec final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarstm",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // callfunction ::= sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // callfunction ::= Call sfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("callfunction",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ret ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ret ::= Return exp 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ret ::= Return Ch final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ret ::= Return conca final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ret ::= Return TipoBoolean final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ret",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ffunction ::= func As tipo final ret EndFunction final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ffunction ::= func final EndFunction final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ffunction ::= func final functionbody EndFunction final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ffunction ::= func As tipo final functionbody ret EndFunction final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ffunction",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func ::= Function Id NT$0 ParIzq listparam ParDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		if(ProcedimietnoActual == ""){
                                                                                                     Simbolos s = new Simbolos(id.toString(), "function", 0);
                                                                                                     s.setTipoDeDeclaracion("Declaracion de Funcion");
                                                                                                    insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),0);
                                                                                                }else{
                                                                                                    Simbolos s = new Simbolos(id.toString(), "function", ambitoactual);
                                                                                                    s.setTipoDeDeclaracion("Declaracion de Funcion");
                                                                                                    insertarSimbolo(id.toString(),s,(idleft+1),(idright+1),ambitoactual);
                                                                                                }
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("func",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
ProcedimietnoActual = "id.toString()";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sfunctioncall ::= Id ParIzq listarg ParDer final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunctioncall",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sfunction ::= Id ParIzq listparam ParDer final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sfunction",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // leer ::= Input ParIzq Id ParDer final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("leer",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // impre ::= Id Punto Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // impre ::= Ch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // impre ::= conca 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // impre ::= Id ParIzq listparam ParDer 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // impre ::= Id 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("impre",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // escribir ::= Print impre final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("escribir",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decfunction ::= types 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // decfunction ::= ffunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decfunction ::= Sub sfunction EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decfunction ::= Sub sfunction functionbody EndSub final 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decfunction ::= error decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decfunction",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dectype ::= Id As Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 boolean esta = false,existe=false;
                                       for(int i = 0;i<types.size();i++){
                                            if(ExisteType(types.get(i).id.toString(),id1.toString())){existe = true;}
                                       }
                                       System.out.println(existe);
                                       if(existe){
                                       for (int i = 0; i < nuevo.listaDeInstancias.size(); i++) {
                                           if (nuevo.listaDeInstancias.get(i).equals(id.toString())){
                                               esta = true;
                                           }
                                       }
                                       if (esta == false) {
                                           nuevo.listaDeInstancias.add(id);
                                           nuevo.tipoDeInstancias.add(id1);
                                       }else{E2(idleft + 1,idright + 1, "Variable del type ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );}

                                        RESULT= id+"xRecord("+Record.get(id1)+")" ;}else{E2(id1left + 1,id1right + 1, "Type no ha sido declarado: " + "' "+ id1.toString().toUpperCase() + "' "  );}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dectype ::= Id As tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 boolean esta = false;
                                            for (int i = 0; i < nuevo.listaDeInstancias.size(); i++) {
                                                if (nuevo.listaDeInstancias.get(i).equals(id.toString())){
                                                    esta = true;
                                                }
                                            }
                                            if (esta == false) {
                                                nuevo.listaDeInstancias.add(id);
                                                nuevo.tipoDeInstancias.add(tp);
                                                RESULT=id.toString() + "x" +tp.toString();
                                            }else{E2(idleft + 1,idright + 1, "Variable de la instancia ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );}
                                             
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dectype",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decvarlist ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decvarlist ::= dectype final decvarlist 
            {
              Object RESULT =null;
		int dtpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int dtpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object dtp = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		if(dl.toString()==""){RESULT=dtp.toString();}else{
                                                         RESULT=dtp.toString()+"X"+dl.toString();}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("decvarlist",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types ::= Type Id final decvarlist EndType final 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int dtpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int dtpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object dtp = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		if(Record.get(id.toString()) == null){
                                                                Record.put(id.toString(),dtp.toString());
                                                                nuevo.id = id.toString();
                                                                types.add(nuevo);int j=0;
                                                                for(String k : Record.keySet()){
                                                                        String elemento = Record.get(k);
                                                                        System.out.println("ID:" + k + " valor: " + elemento );
                                                                        for (int i = 0; i < types.get(j).listaDeInstancias.size(); i++) {
                                                                            System.out.println(types.get(j).listaDeInstancias.get(i));
                                                                            System.out.println(types.get(j).tipoDeInstancias.get(i));
                                                                        }
                                                                        j++;
                                                                    }
                                                                    nuevo = new Type();
                                                                }else{
                                                                    E2(dtpleft + 1,dtpright + 1, "Variable o Metodo ya declarada: " + "' "+ id.toString().toUpperCase() + "' "  );
                                                                }

                                                                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("types",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionlist ::= decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functionlist ::= functionlist decfunction 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionlist",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionbody ::= statementlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("functionbody",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conca ::= str 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("conca",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conca ::= str Concatenacion conca 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("conca",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ini ::= dec mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ini ::= dec functionlist mainstm functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini ::= dec mainstm functionlist 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= dec functionlist error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= dec functionlist mainstm 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= EndLine 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= EndLine ini 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

